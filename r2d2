#!/bin/bash -e

test -f ~/.r2d2 && source ~/.r2d2

# ffmpeg static builds http://ffmpeg.gusari.org/static/
# static builds do not have x11grab enabled, so you can only generate HTML5 video not capture
test -f ffmpeg && export PATH=.:$PATH # Use local version of ffmpeg

die() { echo "$@"; exit 1; }
require() { which $1 &> /dev/null; }
for prg in xdpyinfo ffmpeg; do
	require $prg || die "needs ${prg} installed"
done

usage() {
cat $(readlink -f $(dirname $0))/README.md
}

verbose="-v warning"
mixer="90%"
while getopts "o:d:vhu:c:nrm" o
do
	case "$o" in
	(n) nomp4=true;;
	(m) mixer="";;
	(d) duration="-t $OPTARG";;
	(\?) echo "Invalid option: -$OPTARG" >&2 ;;
	(h) usage; exit;;
	(v) verbose="";; # funnily ffmpeg is verbose by default
	(r) raw=true;;
	(*) break;;
	esac
done
shift $((OPTIND - 1))

if test -f "$1"
then
	input="$1"
	eval $(ffprobe -v 0 -of flat=s=_ -show_format "$input") # neat trick to get video variables into shell
	test "$format_tags_creation_time" && today=$(echo $format_tags_creation_time | awk '{print $1}')
fi

test "$today" || today="$(date --iso-8601=date)"
out="$today/$(basename "${1:-out.webm}" | tr ' ' _)"
test "$input" || input="$(basename $out .webm).mkv"
mkdir "$today" &>/dev/null || true

if test "${out##*.}" != "webm"; then out="${out%.*}.webm"; fi

if test -f "$out"
then
	echo -e "\033[1;34m$0\033[m $out already exists"
	exit
fi

log="${out%.*}.log"
test "$nomp4" || mp4="${out%.*}.mp4"
test "$verbose" || echo -e "\033[1;34m$0\033[m $input"

# Set a sane recording volume
if test "$mixer"
then
	amixer set "Capture" "$mixer"
	test "$verbose" || echo -e "\033[1;34m$0\033[m Set recording volume to $mixer"
fi

echo -e "\033[1;34m$0\033[m saving progress to $log"
test "$duration" || ! test -f "$1" && echo -e "\033[1;34m$0\033[m Type q then enter to end your screencast"

(

# Only create RAW file if one does not exist
if ! test -f "$input"
then
	res="$(xdpyinfo | awk '/dimensions:/ { print $2; exit }')"
	echo -e "\033[1;34m$0\033[m Capturing $res"
	set -x
	ffmpeg $verbose $duration -threads auto -f x11grab -s $res -i :0.0 -f alsa -i hw:0,0 -acodec pcm_s16le -vcodec ffvhuff $input
	set +x
fi

# quit if we just wanted the raw file
test "$raw" && exit

test "$mp4" &&
echo -e "\033[1;34m$0\033[m encoding $mp4 for non-free Apple devices" &&
set -x
time ffmpeg $verbose -y -i "$input" -movflags +faststart -c:v libx264 -threads auto -vprofile baseline -level 30 -maxrate 10000000 -bufsize 10000000 -acodec aac -strict experimental $mp4

set +x
echo -e "\033[1;34m$0\033[m encoding $out for everything else"
set -x

time ffmpeg $verbose -y -i "$input" -c:a libvorbis -q:a 7 -c:v libvpx -threads auto "$out"

set +x
) 2>&1 | tee -a "$log"

if ! test -f "$out" && test -f "$input"
then
	echo -e "\033[1;34m$0\033[m created RAW file $input"
	exit
fi

. $(dirname $0)/html-template

if test -f "$mp4"
then
	du=$(du -h "$out" "$mp4" | tr '\n\t' ' ')
else
	du=$(du -h "$out" | tr '\t' ' ')
fi

echo -e "\033[1;34m$0\033[m created $du $(test "$format_duration" && echo duration: $format_duration seconds)"
echo -e "\033[1;34m$0\033[m compressed $(du -h "$input" "$out" | tr '\n\t' ' ') $(stat -c %s "$input" "$out" | awk 't{printf("%.2f\n",100*$1/t)}{t=$1}')% of size"

if test "$dest"
then
	echo rsync -r --progress --remove-source-files $today $dest
	echo -e "\n\033[1;34m$0\033[m SHARE URL: http://$(basename $dest)/$html\n"
fi
